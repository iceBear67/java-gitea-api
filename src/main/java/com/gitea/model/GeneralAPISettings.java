/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.16.8+97-gee14285
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.gitea.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;


/**
 * GeneralAPISettings contains global api settings exposed by it
 */
@ApiModel(description = "GeneralAPISettings contains global api settings exposed by it")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2022-07-07T10:42:04.488+08:00")
public class GeneralAPISettings   {
  @SerializedName("default_git_trees_per_page")
  private Long defaultGitTreesPerPage = null;

  @SerializedName("default_max_blob_size")
  private Long defaultMaxBlobSize = null;

  @SerializedName("default_paging_num")
  private Long defaultPagingNum = null;

  @SerializedName("max_response_items")
  private Long maxResponseItems = null;

  public GeneralAPISettings defaultGitTreesPerPage(Long defaultGitTreesPerPage) {
    this.defaultGitTreesPerPage = defaultGitTreesPerPage;
    return this;
  }

   /**
   * Get defaultGitTreesPerPage
   * @return defaultGitTreesPerPage
  **/
  @ApiModelProperty(example = "null", value = "")
  public Long getDefaultGitTreesPerPage() {
    return defaultGitTreesPerPage;
  }

  public void setDefaultGitTreesPerPage(Long defaultGitTreesPerPage) {
    this.defaultGitTreesPerPage = defaultGitTreesPerPage;
  }

  public GeneralAPISettings defaultMaxBlobSize(Long defaultMaxBlobSize) {
    this.defaultMaxBlobSize = defaultMaxBlobSize;
    return this;
  }

   /**
   * Get defaultMaxBlobSize
   * @return defaultMaxBlobSize
  **/
  @ApiModelProperty(example = "null", value = "")
  public Long getDefaultMaxBlobSize() {
    return defaultMaxBlobSize;
  }

  public void setDefaultMaxBlobSize(Long defaultMaxBlobSize) {
    this.defaultMaxBlobSize = defaultMaxBlobSize;
  }

  public GeneralAPISettings defaultPagingNum(Long defaultPagingNum) {
    this.defaultPagingNum = defaultPagingNum;
    return this;
  }

   /**
   * Get defaultPagingNum
   * @return defaultPagingNum
  **/
  @ApiModelProperty(example = "null", value = "")
  public Long getDefaultPagingNum() {
    return defaultPagingNum;
  }

  public void setDefaultPagingNum(Long defaultPagingNum) {
    this.defaultPagingNum = defaultPagingNum;
  }

  public GeneralAPISettings maxResponseItems(Long maxResponseItems) {
    this.maxResponseItems = maxResponseItems;
    return this;
  }

   /**
   * Get maxResponseItems
   * @return maxResponseItems
  **/
  @ApiModelProperty(example = "null", value = "")
  public Long getMaxResponseItems() {
    return maxResponseItems;
  }

  public void setMaxResponseItems(Long maxResponseItems) {
    this.maxResponseItems = maxResponseItems;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeneralAPISettings generalAPISettings = (GeneralAPISettings) o;
    return Objects.equals(this.defaultGitTreesPerPage, generalAPISettings.defaultGitTreesPerPage) &&
        Objects.equals(this.defaultMaxBlobSize, generalAPISettings.defaultMaxBlobSize) &&
        Objects.equals(this.defaultPagingNum, generalAPISettings.defaultPagingNum) &&
        Objects.equals(this.maxResponseItems, generalAPISettings.maxResponseItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultGitTreesPerPage, defaultMaxBlobSize, defaultPagingNum, maxResponseItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeneralAPISettings {\n");
    
    sb.append("    defaultGitTreesPerPage: ").append(toIndentedString(defaultGitTreesPerPage)).append("\n");
    sb.append("    defaultMaxBlobSize: ").append(toIndentedString(defaultMaxBlobSize)).append("\n");
    sb.append("    defaultPagingNum: ").append(toIndentedString(defaultPagingNum)).append("\n");
    sb.append("    maxResponseItems: ").append(toIndentedString(maxResponseItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

