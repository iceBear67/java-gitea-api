/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.16.8+97-gee14285
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.gitea.api;

import com.gitea.ApiException;
import com.gitea.model.NotificationThread;
import org.joda.time.DateTime;
import com.gitea.model.NotificationCount;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationApi
 */
public class NotificationApiTest {

    private final NotificationApi api = new NotificationApi();

    
    /**
     * List users&#39;s notification threads
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notifyGetListTest() throws ApiException {
        Boolean all = null;
        List<String> statusTypes = null;
        List<String> subjectType = null;
        DateTime since = null;
        DateTime before = null;
        Integer page = null;
        Integer limit = null;
        // List<NotificationThread> response = api.notifyGetList(all, statusTypes, subjectType, since, before, page, limit);

        // TODO: test validations
    }
    
    /**
     * List users&#39;s notification threads on a specific repo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notifyGetRepoListTest() throws ApiException {
        String owner = null;
        String repo = null;
        Boolean all = null;
        List<String> statusTypes = null;
        List<String> subjectType = null;
        DateTime since = null;
        DateTime before = null;
        Integer page = null;
        Integer limit = null;
        // List<NotificationThread> response = api.notifyGetRepoList(owner, repo, all, statusTypes, subjectType, since, before, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get notification thread by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notifyGetThreadTest() throws ApiException {
        String id = null;
        // NotificationThread response = api.notifyGetThread(id);

        // TODO: test validations
    }
    
    /**
     * Check if unread notifications exist
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notifyNewAvailableTest() throws ApiException {
        // NotificationCount response = api.notifyNewAvailable();

        // TODO: test validations
    }
    
    /**
     * Mark notification threads as read, pinned or unread
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notifyReadListTest() throws ApiException {
        DateTime lastReadAt = null;
        String all = null;
        List<String> statusTypes = null;
        String toStatus = null;
        // List<NotificationThread> response = api.notifyReadList(lastReadAt, all, statusTypes, toStatus);

        // TODO: test validations
    }
    
    /**
     * Mark notification threads as read, pinned or unread on a specific repo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notifyReadRepoListTest() throws ApiException {
        String owner = null;
        String repo = null;
        String all = null;
        List<String> statusTypes = null;
        String toStatus = null;
        DateTime lastReadAt = null;
        // List<NotificationThread> response = api.notifyReadRepoList(owner, repo, all, statusTypes, toStatus, lastReadAt);

        // TODO: test validations
    }
    
    /**
     * Mark notification thread as read by ID
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notifyReadThreadTest() throws ApiException {
        String id = null;
        String toStatus = null;
        // NotificationThread response = api.notifyReadThread(id, toStatus);

        // TODO: test validations
    }
    
}
