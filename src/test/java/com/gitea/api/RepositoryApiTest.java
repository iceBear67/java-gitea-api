/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.16.8+97-gee14285
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.gitea.api;

import com.gitea.ApiException;
import com.gitea.model.Repository;
import com.gitea.model.CreateRepoOption;
import com.gitea.model.CreateForkOption;
import com.gitea.model.GenerateRepoOption;
import com.gitea.model.AnnotatedTag;
import com.gitea.model.GitBlobResponse;
import com.gitea.model.GitTreeResponse;
import com.gitea.model.AddCollaboratorOption;
import com.gitea.model.Team;
import com.gitea.model.Branch;
import com.gitea.model.CreateBranchRepoOption;
import com.gitea.model.CreateBranchProtectionOption;
import com.gitea.model.BranchProtection;
import com.gitea.model.FileResponse;
import com.gitea.model.CreateFileOptions;
import com.gitea.model.Hook;
import com.gitea.model.CreateHookOption;
import com.gitea.model.DeployKey;
import com.gitea.model.CreateKeyOption;
import com.gitea.model.CreatePullRequestOption;
import com.gitea.model.PullRequest;
import com.gitea.model.PullReview;
import com.gitea.model.CreatePullReviewOptions;
import com.gitea.model.PullReviewRequestOptions;
import com.gitea.model.CreateReleaseOption;
import com.gitea.model.Release;
import com.gitea.model.Attachment;
import java.io.File;
import com.gitea.model.CommitStatus;
import com.gitea.model.CreateStatusOption;
import com.gitea.model.CreateTagOption;
import com.gitea.model.Tag;
import com.gitea.model.CreateWikiPageOptions;
import com.gitea.model.WikiPage;
import com.gitea.model.FileDeleteResponse;
import com.gitea.model.DeleteFileOptions;
import com.gitea.model.DismissPullReviewOptions;
import com.gitea.model.EditRepoOption;
import com.gitea.model.EditBranchProtectionOption;
import com.gitea.model.EditGitHookOption;
import com.gitea.model.GitHook;
import com.gitea.model.EditHookOption;
import com.gitea.model.EditPullRequestOption;
import com.gitea.model.EditReleaseOption;
import com.gitea.model.EditAttachmentOptions;
import com.gitea.model.Commit;
import com.gitea.model.APIError;
import com.gitea.model.User;
import com.gitea.model.CombinedStatus;
import com.gitea.model.ContentsResponse;
import com.gitea.model.IssueTemplate;
import com.gitea.model.Note;
import com.gitea.model.PullReviewComment;
import com.gitea.model.WikiCommitList;
import com.gitea.model.WikiPageMetaData;
import com.gitea.model.Reference;
import com.gitea.model.TopicName;
import com.gitea.model.MergePullRequestOption;
import com.gitea.model.MigrateRepoOptions;
import com.gitea.model.SearchResults;
import com.gitea.model.SubmitPullReviewOptions;
import com.gitea.model.TrackedTime;
import org.joda.time.DateTime;
import com.gitea.model.TransferRepoOption;
import com.gitea.model.UpdateFileOptions;
import com.gitea.model.RepoTopicOptions;
import com.gitea.model.TopicResponse;
import com.gitea.model.WatchInfo;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RepositoryApi
 */
public class RepositoryApiTest {

    private final RepositoryApi api = new RepositoryApi();

    
    /**
     * Accept a repo transfer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void acceptRepoTransferTest() throws ApiException {
        String owner = null;
        String repo = null;
        // Repository response = api.acceptRepoTransfer(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Create a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCurrentUserRepoTest() throws ApiException {
        CreateRepoOption body = null;
        // Repository response = api.createCurrentUserRepo(body);

        // TODO: test validations
    }
    
    /**
     * Fork a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createForkTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateForkOption body = null;
        // Repository response = api.createFork(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Create a repository using a template
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateRepoTest() throws ApiException {
        String templateOwner = null;
        String templateRepo = null;
        GenerateRepoOption body = null;
        // Repository response = api.generateRepo(templateOwner, templateRepo, body);

        // TODO: test validations
    }
    
    /**
     * Gets the tag object of an annotated tag (not lightweight tags)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnnotatedTagTest() throws ApiException {
        String owner = null;
        String repo = null;
        String sha = null;
        // AnnotatedTag response = api.getAnnotatedTag(owner, repo, sha);

        // TODO: test validations
    }
    
    /**
     * Gets the blob of a repository.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBlobTest() throws ApiException {
        String owner = null;
        String repo = null;
        String sha = null;
        // GitBlobResponse response = api.getBlob(owner, repo, sha);

        // TODO: test validations
    }
    
    /**
     * Gets the tree of a repository.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTreeTest() throws ApiException {
        String owner = null;
        String repo = null;
        String sha = null;
        Boolean recursive = null;
        Integer page = null;
        Integer perPage = null;
        // GitTreeResponse response = api.getTree(owner, repo, sha, recursive, page, perPage);

        // TODO: test validations
    }
    
    /**
     * List a repository&#39;s forks
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listForksTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer page = null;
        Integer limit = null;
        // List<Repository> response = api.listForks(owner, repo, page, limit);

        // TODO: test validations
    }
    
    /**
     * Reject a repo transfer
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rejectRepoTransferTest() throws ApiException {
        String owner = null;
        String repo = null;
        // Repository response = api.rejectRepoTransfer(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Add a collaborator to a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoAddCollaboratorTest() throws ApiException {
        String owner = null;
        String repo = null;
        String collaborator = null;
        AddCollaboratorOption body = null;
        // api.repoAddCollaborator(owner, repo, collaborator, body);

        // TODO: test validations
    }
    
    /**
     * Add a team to a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoAddTeamTest() throws ApiException {
        String owner = null;
        String repo = null;
        String team = null;
        // api.repoAddTeam(owner, repo, team);

        // TODO: test validations
    }
    
    /**
     * Add a topic to a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoAddTopicTest() throws ApiException {
        String owner = null;
        String repo = null;
        String topic = null;
        // api.repoAddTopic(owner, repo, topic);

        // TODO: test validations
    }
    
    /**
     * Check if a user is a collaborator of a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCheckCollaboratorTest() throws ApiException {
        String owner = null;
        String repo = null;
        String collaborator = null;
        // api.repoCheckCollaborator(owner, repo, collaborator);

        // TODO: test validations
    }
    
    /**
     * Check if a team is assigned to a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCheckTeamTest() throws ApiException {
        String owner = null;
        String repo = null;
        String team = null;
        // Team response = api.repoCheckTeam(owner, repo, team);

        // TODO: test validations
    }
    
    /**
     * Create a branch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreateBranchTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateBranchRepoOption body = null;
        // Branch response = api.repoCreateBranch(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Create a branch protections for a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreateBranchProtectionTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateBranchProtectionOption body = null;
        // BranchProtection response = api.repoCreateBranchProtection(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Create a file in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreateFileTest() throws ApiException {
        String owner = null;
        String repo = null;
        String filepath = null;
        CreateFileOptions body = null;
        // FileResponse response = api.repoCreateFile(owner, repo, filepath, body);

        // TODO: test validations
    }
    
    /**
     * Create a hook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreateHookTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateHookOption body = null;
        // Hook response = api.repoCreateHook(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Add a key to a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreateKeyTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateKeyOption body = null;
        // DeployKey response = api.repoCreateKey(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Create a pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreatePullRequestTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreatePullRequestOption body = null;
        // PullRequest response = api.repoCreatePullRequest(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Create a review to an pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreatePullReviewTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        CreatePullReviewOptions body = null;
        // PullReview response = api.repoCreatePullReview(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * create review requests for a pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreatePullReviewRequestsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        PullReviewRequestOptions body = null;
        // List<PullReview> response = api.repoCreatePullReviewRequests(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Create a release
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreateReleaseTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateReleaseOption body = null;
        // Release response = api.repoCreateRelease(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Create a release attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreateReleaseAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        File attachment = null;
        String name = null;
        // Attachment response = api.repoCreateReleaseAttachment(owner, repo, id, attachment, name);

        // TODO: test validations
    }
    
    /**
     * Create a commit status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreateStatusTest() throws ApiException {
        String owner = null;
        String repo = null;
        String sha = null;
        CreateStatusOption body = null;
        // CommitStatus response = api.repoCreateStatus(owner, repo, sha, body);

        // TODO: test validations
    }
    
    /**
     * Create a new git tag in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreateTagTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateTagOption body = null;
        // Tag response = api.repoCreateTag(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Create a wiki page
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoCreateWikiPageTest() throws ApiException {
        String owner = null;
        String repo = null;
        CreateWikiPageOptions body = null;
        // WikiPage response = api.repoCreateWikiPage(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Delete a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteTest() throws ApiException {
        String owner = null;
        String repo = null;
        // api.repoDelete(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Delete a specific branch from a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteBranchTest() throws ApiException {
        String owner = null;
        String repo = null;
        String branch = null;
        // api.repoDeleteBranch(owner, repo, branch);

        // TODO: test validations
    }
    
    /**
     * Delete a specific branch protection for the repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteBranchProtectionTest() throws ApiException {
        String owner = null;
        String repo = null;
        String name = null;
        // api.repoDeleteBranchProtection(owner, repo, name);

        // TODO: test validations
    }
    
    /**
     * Delete a collaborator from a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteCollaboratorTest() throws ApiException {
        String owner = null;
        String repo = null;
        String collaborator = null;
        // api.repoDeleteCollaborator(owner, repo, collaborator);

        // TODO: test validations
    }
    
    /**
     * Delete a file in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteFileTest() throws ApiException {
        String owner = null;
        String repo = null;
        String filepath = null;
        DeleteFileOptions body = null;
        // FileDeleteResponse response = api.repoDeleteFile(owner, repo, filepath, body);

        // TODO: test validations
    }
    
    /**
     * Delete a Git hook in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteGitHookTest() throws ApiException {
        String owner = null;
        String repo = null;
        String id = null;
        // api.repoDeleteGitHook(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Delete a hook in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteHookTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        // api.repoDeleteHook(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Delete a key from a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteKeyTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        // api.repoDeleteKey(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Delete a specific review from a pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeletePullReviewTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long id = null;
        // api.repoDeletePullReview(owner, repo, index, id);

        // TODO: test validations
    }
    
    /**
     * cancel review requests for a pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeletePullReviewRequestsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        PullReviewRequestOptions body = null;
        // api.repoDeletePullReviewRequests(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Delete a release
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteReleaseTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        // api.repoDeleteRelease(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Delete a release attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteReleaseAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Long attachmentId = null;
        // api.repoDeleteReleaseAttachment(owner, repo, id, attachmentId);

        // TODO: test validations
    }
    
    /**
     * Delete a release by tag name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteReleaseByTagTest() throws ApiException {
        String owner = null;
        String repo = null;
        String tag = null;
        // api.repoDeleteReleaseByTag(owner, repo, tag);

        // TODO: test validations
    }
    
    /**
     * Delete a repository&#39;s tag by name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteTagTest() throws ApiException {
        String owner = null;
        String repo = null;
        String tag = null;
        // api.repoDeleteTag(owner, repo, tag);

        // TODO: test validations
    }
    
    /**
     * Delete a team from a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteTeamTest() throws ApiException {
        String owner = null;
        String repo = null;
        String team = null;
        // api.repoDeleteTeam(owner, repo, team);

        // TODO: test validations
    }
    
    /**
     * Delete a topic from a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteTopicTest() throws ApiException {
        String owner = null;
        String repo = null;
        String topic = null;
        // api.repoDeleteTopic(owner, repo, topic);

        // TODO: test validations
    }
    
    /**
     * Delete a wiki page
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDeleteWikiPageTest() throws ApiException {
        String owner = null;
        String repo = null;
        String pageName = null;
        // api.repoDeleteWikiPage(owner, repo, pageName);

        // TODO: test validations
    }
    
    /**
     * Dismiss a review for a pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDismissPullReviewTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long id = null;
        DismissPullReviewOptions body = null;
        // PullReview response = api.repoDismissPullReview(owner, repo, index, id, body);

        // TODO: test validations
    }
    
    /**
     * Get a commit&#39;s diff or patch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDownloadCommitDiffOrPatchTest() throws ApiException {
        String owner = null;
        String repo = null;
        String sha = null;
        String diffType = null;
        // String response = api.repoDownloadCommitDiffOrPatch(owner, repo, sha, diffType);

        // TODO: test validations
    }
    
    /**
     * Get a pull request diff or patch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoDownloadPullDiffOrPatchTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        String diffType = null;
        Boolean binary = null;
        // String response = api.repoDownloadPullDiffOrPatch(owner, repo, index, diffType, binary);

        // TODO: test validations
    }
    
    /**
     * Edit a repository&#39;s properties. Only fields that are set will be changed.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoEditTest() throws ApiException {
        String owner = null;
        String repo = null;
        EditRepoOption body = null;
        // Repository response = api.repoEdit(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Edit a branch protections for a repository. Only fields that are set will be changed
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoEditBranchProtectionTest() throws ApiException {
        String owner = null;
        String repo = null;
        String name = null;
        EditBranchProtectionOption body = null;
        // BranchProtection response = api.repoEditBranchProtection(owner, repo, name, body);

        // TODO: test validations
    }
    
    /**
     * Edit a Git hook in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoEditGitHookTest() throws ApiException {
        String owner = null;
        String repo = null;
        String id = null;
        EditGitHookOption body = null;
        // GitHook response = api.repoEditGitHook(owner, repo, id, body);

        // TODO: test validations
    }
    
    /**
     * Edit a hook in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoEditHookTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        EditHookOption body = null;
        // Hook response = api.repoEditHook(owner, repo, id, body);

        // TODO: test validations
    }
    
    /**
     * Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoEditPullRequestTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        EditPullRequestOption body = null;
        // PullRequest response = api.repoEditPullRequest(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Update a release
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoEditReleaseTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        EditReleaseOption body = null;
        // Release response = api.repoEditRelease(owner, repo, id, body);

        // TODO: test validations
    }
    
    /**
     * Edit a release attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoEditReleaseAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Long attachmentId = null;
        EditAttachmentOptions body = null;
        // Attachment response = api.repoEditReleaseAttachment(owner, repo, id, attachmentId, body);

        // TODO: test validations
    }
    
    /**
     * Edit a wiki page
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoEditWikiPageTest() throws ApiException {
        String owner = null;
        String repo = null;
        String pageName = null;
        CreateWikiPageOptions body = null;
        // WikiPage response = api.repoEditWikiPage(owner, repo, pageName, body);

        // TODO: test validations
    }
    
    /**
     * Get a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetTest() throws ApiException {
        String owner = null;
        String repo = null;
        // Repository response = api.repoGet(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Get a list of all commits from a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetAllCommitsTest() throws ApiException {
        String owner = null;
        String repo = null;
        String sha = null;
        String path = null;
        Integer page = null;
        Integer limit = null;
        // List<Commit> response = api.repoGetAllCommits(owner, repo, sha, path, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get an archive of a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetArchiveTest() throws ApiException {
        String owner = null;
        String repo = null;
        String archive = null;
        // api.repoGetArchive(owner, repo, archive);

        // TODO: test validations
    }
    
    /**
     * Return all users that have write access and can be assigned to issues
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetAssigneesTest() throws ApiException {
        String owner = null;
        String repo = null;
        // List<User> response = api.repoGetAssignees(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Retrieve a specific branch from a repository, including its effective branch protection
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetBranchTest() throws ApiException {
        String owner = null;
        String repo = null;
        String branch = null;
        // Branch response = api.repoGetBranch(owner, repo, branch);

        // TODO: test validations
    }
    
    /**
     * Get a specific branch protection for the repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetBranchProtectionTest() throws ApiException {
        String owner = null;
        String repo = null;
        String name = null;
        // BranchProtection response = api.repoGetBranchProtection(owner, repo, name);

        // TODO: test validations
    }
    
    /**
     * Get a repository by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetByIDTest() throws ApiException {
        Long id = null;
        // Repository response = api.repoGetByID(id);

        // TODO: test validations
    }
    
    /**
     * Get a commit&#39;s combined status, by branch/tag/commit reference
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetCombinedStatusByRefTest() throws ApiException {
        String owner = null;
        String repo = null;
        String ref = null;
        Integer page = null;
        Integer limit = null;
        // CombinedStatus response = api.repoGetCombinedStatusByRef(owner, repo, ref, page, limit);

        // TODO: test validations
    }
    
    /**
     * Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetContentsTest() throws ApiException {
        String owner = null;
        String repo = null;
        String filepath = null;
        String ref = null;
        // ContentsResponse response = api.repoGetContents(owner, repo, filepath, ref);

        // TODO: test validations
    }
    
    /**
     * Gets the metadata of all the entries of the root dir
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetContentsListTest() throws ApiException {
        String owner = null;
        String repo = null;
        String ref = null;
        // List<ContentsResponse> response = api.repoGetContentsList(owner, repo, ref);

        // TODO: test validations
    }
    
    /**
     * Get the EditorConfig definitions of a file in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetEditorConfigTest() throws ApiException {
        String owner = null;
        String repo = null;
        String filepath = null;
        // api.repoGetEditorConfig(owner, repo, filepath);

        // TODO: test validations
    }
    
    /**
     * Get a Git hook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetGitHookTest() throws ApiException {
        String owner = null;
        String repo = null;
        String id = null;
        // GitHook response = api.repoGetGitHook(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Get a hook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetHookTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        // Hook response = api.repoGetHook(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Get available issue templates for a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetIssueTemplatesTest() throws ApiException {
        String owner = null;
        String repo = null;
        // List<IssueTemplate> response = api.repoGetIssueTemplates(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Get a repository&#39;s key by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetKeyTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        // DeployKey response = api.repoGetKey(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Get languages and number of bytes of code written
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetLanguagesTest() throws ApiException {
        String owner = null;
        String repo = null;
        // Map<String, Long> response = api.repoGetLanguages(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Get a note corresponding to a single commit from a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetNoteTest() throws ApiException {
        String owner = null;
        String repo = null;
        String sha = null;
        // Note response = api.repoGetNote(owner, repo, sha);

        // TODO: test validations
    }
    
    /**
     * Get a pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetPullRequestTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        // PullRequest response = api.repoGetPullRequest(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Get commits for a pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetPullRequestCommitsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Integer page = null;
        Integer limit = null;
        // List<Commit> response = api.repoGetPullRequestCommits(owner, repo, index, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get a specific review for a pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetPullReviewTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long id = null;
        // PullReview response = api.repoGetPullReview(owner, repo, index, id);

        // TODO: test validations
    }
    
    /**
     * Get a specific review for a pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetPullReviewCommentsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long id = null;
        // List<PullReviewComment> response = api.repoGetPullReviewComments(owner, repo, index, id);

        // TODO: test validations
    }
    
    /**
     * Get a file from a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetRawFileTest() throws ApiException {
        String owner = null;
        String repo = null;
        String filepath = null;
        String ref = null;
        // api.repoGetRawFile(owner, repo, filepath, ref);

        // TODO: test validations
    }
    
    /**
     * Get a release
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetReleaseTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        // Release response = api.repoGetRelease(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * Get a release attachment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetReleaseAttachmentTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        Long attachmentId = null;
        // Attachment response = api.repoGetReleaseAttachment(owner, repo, id, attachmentId);

        // TODO: test validations
    }
    
    /**
     * Get a release by tag name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetReleaseByTagTest() throws ApiException {
        String owner = null;
        String repo = null;
        String tag = null;
        // Release response = api.repoGetReleaseByTag(owner, repo, tag);

        // TODO: test validations
    }
    
    /**
     * Return all users that can be requested to review in this repo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetReviewersTest() throws ApiException {
        String owner = null;
        String repo = null;
        // List<User> response = api.repoGetReviewers(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Get a single commit from a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetSingleCommitTest() throws ApiException {
        String owner = null;
        String repo = null;
        String sha = null;
        // Commit response = api.repoGetSingleCommit(owner, repo, sha);

        // TODO: test validations
    }
    
    /**
     * Get the tag of a repository by tag name
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetTagTest() throws ApiException {
        String owner = null;
        String repo = null;
        String tag = null;
        // Tag response = api.repoGetTag(owner, repo, tag);

        // TODO: test validations
    }
    
    /**
     * Get a wiki page
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetWikiPageTest() throws ApiException {
        String owner = null;
        String repo = null;
        String pageName = null;
        // WikiPage response = api.repoGetWikiPage(owner, repo, pageName);

        // TODO: test validations
    }
    
    /**
     * Get revisions of a wiki page
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetWikiPageRevisionsTest() throws ApiException {
        String owner = null;
        String repo = null;
        String pageName = null;
        Integer page = null;
        // WikiCommitList response = api.repoGetWikiPageRevisions(owner, repo, pageName, page);

        // TODO: test validations
    }
    
    /**
     * Get all wiki pages
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoGetWikiPagesTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer page = null;
        Integer limit = null;
        // List<WikiPageMetaData> response = api.repoGetWikiPages(owner, repo, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get specified ref or filtered repository&#39;s refs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListAllGitRefsTest() throws ApiException {
        String owner = null;
        String repo = null;
        // List<Reference> response = api.repoListAllGitRefs(owner, repo);

        // TODO: test validations
    }
    
    /**
     * List branch protections for a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListBranchProtectionTest() throws ApiException {
        String owner = null;
        String repo = null;
        // List<BranchProtection> response = api.repoListBranchProtection(owner, repo);

        // TODO: test validations
    }
    
    /**
     * List a repository&#39;s branches
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListBranchesTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer page = null;
        Integer limit = null;
        // List<Branch> response = api.repoListBranches(owner, repo, page, limit);

        // TODO: test validations
    }
    
    /**
     * List a repository&#39;s collaborators
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListCollaboratorsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer page = null;
        Integer limit = null;
        // List<User> response = api.repoListCollaborators(owner, repo, page, limit);

        // TODO: test validations
    }
    
    /**
     * List the Git hooks in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListGitHooksTest() throws ApiException {
        String owner = null;
        String repo = null;
        // List<GitHook> response = api.repoListGitHooks(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Get specified ref or filtered repository&#39;s refs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListGitRefsTest() throws ApiException {
        String owner = null;
        String repo = null;
        String ref = null;
        // List<Reference> response = api.repoListGitRefs(owner, repo, ref);

        // TODO: test validations
    }
    
    /**
     * List the hooks in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListHooksTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer page = null;
        Integer limit = null;
        // List<Hook> response = api.repoListHooks(owner, repo, page, limit);

        // TODO: test validations
    }
    
    /**
     * List a repository&#39;s keys
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListKeysTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer keyId = null;
        String fingerprint = null;
        Integer page = null;
        Integer limit = null;
        // List<DeployKey> response = api.repoListKeys(owner, repo, keyId, fingerprint, page, limit);

        // TODO: test validations
    }
    
    /**
     * List a repo&#39;s pull requests
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListPullRequestsTest() throws ApiException {
        String owner = null;
        String repo = null;
        String state = null;
        String sort = null;
        Long milestone = null;
        List<Long> labels = null;
        Integer page = null;
        Integer limit = null;
        // List<PullRequest> response = api.repoListPullRequests(owner, repo, state, sort, milestone, labels, page, limit);

        // TODO: test validations
    }
    
    /**
     * List all reviews for a pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListPullReviewsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Integer page = null;
        Integer limit = null;
        // List<PullReview> response = api.repoListPullReviews(owner, repo, index, page, limit);

        // TODO: test validations
    }
    
    /**
     * List release&#39;s attachments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListReleaseAttachmentsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        // List<Attachment> response = api.repoListReleaseAttachments(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * List a repo&#39;s releases
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListReleasesTest() throws ApiException {
        String owner = null;
        String repo = null;
        Boolean draft = null;
        Boolean preRelease = null;
        Integer perPage = null;
        Integer page = null;
        Integer limit = null;
        // List<Release> response = api.repoListReleases(owner, repo, draft, preRelease, perPage, page, limit);

        // TODO: test validations
    }
    
    /**
     * List a repo&#39;s stargazers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListStargazersTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer page = null;
        Integer limit = null;
        // List<User> response = api.repoListStargazers(owner, repo, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get a commit&#39;s statuses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListStatusesTest() throws ApiException {
        String owner = null;
        String repo = null;
        String sha = null;
        String sort = null;
        String state = null;
        Integer page = null;
        Integer limit = null;
        // List<CommitStatus> response = api.repoListStatuses(owner, repo, sha, sort, state, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get a commit&#39;s statuses, by branch/tag/commit reference
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListStatusesByRefTest() throws ApiException {
        String owner = null;
        String repo = null;
        String ref = null;
        String sort = null;
        String state = null;
        Integer page = null;
        Integer limit = null;
        // List<CommitStatus> response = api.repoListStatusesByRef(owner, repo, ref, sort, state, page, limit);

        // TODO: test validations
    }
    
    /**
     * List a repo&#39;s watchers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListSubscribersTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer page = null;
        Integer limit = null;
        // List<User> response = api.repoListSubscribers(owner, repo, page, limit);

        // TODO: test validations
    }
    
    /**
     * List a repository&#39;s tags
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListTagsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer page = null;
        Integer limit = null;
        // List<Tag> response = api.repoListTags(owner, repo, page, limit);

        // TODO: test validations
    }
    
    /**
     * List a repository&#39;s teams
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListTeamsTest() throws ApiException {
        String owner = null;
        String repo = null;
        // List<Team> response = api.repoListTeams(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Get list of topics that a repository has
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoListTopicsTest() throws ApiException {
        String owner = null;
        String repo = null;
        Integer page = null;
        Integer limit = null;
        // TopicName response = api.repoListTopics(owner, repo, page, limit);

        // TODO: test validations
    }
    
    /**
     * Merge a pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoMergePullRequestTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        MergePullRequestOption body = null;
        // api.repoMergePullRequest(owner, repo, index, body);

        // TODO: test validations
    }
    
    /**
     * Migrate a remote git repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoMigrateTest() throws ApiException {
        MigrateRepoOptions body = null;
        // Repository response = api.repoMigrate(body);

        // TODO: test validations
    }
    
    /**
     * Sync a mirrored repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoMirrorSyncTest() throws ApiException {
        String owner = null;
        String repo = null;
        // api.repoMirrorSync(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Check if a pull request has been merged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoPullRequestIsMergedTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        // api.repoPullRequestIsMerged(owner, repo, index);

        // TODO: test validations
    }
    
    /**
     * Search for repositories
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoSearchTest() throws ApiException {
        String q = null;
        Boolean topic = null;
        Boolean includeDesc = null;
        Long uid = null;
        Long priorityOwnerId = null;
        Long teamId = null;
        Long starredBy = null;
        Boolean _private = null;
        Boolean isPrivate = null;
        Boolean template = null;
        Boolean archived = null;
        String mode = null;
        Boolean exclusive = null;
        String sort = null;
        String order = null;
        Integer page = null;
        Integer limit = null;
        // SearchResults response = api.repoSearch(q, topic, includeDesc, uid, priorityOwnerId, teamId, starredBy, _private, isPrivate, template, archived, mode, exclusive, sort, order, page, limit);

        // TODO: test validations
    }
    
    /**
     * Get signing-key.gpg for given repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoSigningKeyTest() throws ApiException {
        String owner = null;
        String repo = null;
        // String response = api.repoSigningKey(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Submit a pending review to an pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoSubmitPullReviewTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long id = null;
        SubmitPullReviewOptions body = null;
        // PullReview response = api.repoSubmitPullReview(owner, repo, index, id, body);

        // TODO: test validations
    }
    
    /**
     * Test a push webhook
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoTestHookTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long id = null;
        // api.repoTestHook(owner, repo, id);

        // TODO: test validations
    }
    
    /**
     * List a repo&#39;s tracked times
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoTrackedTimesTest() throws ApiException {
        String owner = null;
        String repo = null;
        String user = null;
        DateTime since = null;
        DateTime before = null;
        Integer page = null;
        Integer limit = null;
        // List<TrackedTime> response = api.repoTrackedTimes(owner, repo, user, since, before, page, limit);

        // TODO: test validations
    }
    
    /**
     * Transfer a repo ownership
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoTransferTest() throws ApiException {
        String owner = null;
        String repo = null;
        TransferRepoOption body = null;
        // Repository response = api.repoTransfer(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * Cancel to dismiss a review for a pull request
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoUnDismissPullReviewTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        Long id = null;
        // PullReview response = api.repoUnDismissPullReview(owner, repo, index, id);

        // TODO: test validations
    }
    
    /**
     * Update a file in a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoUpdateFileTest() throws ApiException {
        String owner = null;
        String repo = null;
        String filepath = null;
        UpdateFileOptions body = null;
        // FileResponse response = api.repoUpdateFile(owner, repo, filepath, body);

        // TODO: test validations
    }
    
    /**
     * Merge PR&#39;s baseBranch into headBranch
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoUpdatePullRequestTest() throws ApiException {
        String owner = null;
        String repo = null;
        Long index = null;
        String style = null;
        // api.repoUpdatePullRequest(owner, repo, index, style);

        // TODO: test validations
    }
    
    /**
     * Replace list of topics for a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void repoUpdateTopicsTest() throws ApiException {
        String owner = null;
        String repo = null;
        RepoTopicOptions body = null;
        // api.repoUpdateTopics(owner, repo, body);

        // TODO: test validations
    }
    
    /**
     * search topics via keyword
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void topicSearchTest() throws ApiException {
        String q = null;
        Integer page = null;
        Integer limit = null;
        // List<TopicResponse> response = api.topicSearch(q, page, limit);

        // TODO: test validations
    }
    
    /**
     * Check if the current user is watching a repo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCurrentCheckSubscriptionTest() throws ApiException {
        String owner = null;
        String repo = null;
        // WatchInfo response = api.userCurrentCheckSubscription(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Unwatch a repo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCurrentDeleteSubscriptionTest() throws ApiException {
        String owner = null;
        String repo = null;
        // api.userCurrentDeleteSubscription(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Watch a repo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCurrentPutSubscriptionTest() throws ApiException {
        String owner = null;
        String repo = null;
        // WatchInfo response = api.userCurrentPutSubscription(owner, repo);

        // TODO: test validations
    }
    
    /**
     * List a user&#39;s tracked times in a repo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userTrackedTimesTest() throws ApiException {
        String owner = null;
        String repo = null;
        String user = null;
        // List<TrackedTime> response = api.userTrackedTimes(owner, repo, user);

        // TODO: test validations
    }
    
}
