/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.16.8+97-gee14285
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.gitea.api;

import com.gitea.ApiException;
import com.gitea.model.Organization;
import com.gitea.model.CreateOrgOption;
import com.gitea.model.PublicKey;
import com.gitea.model.CreateKeyOption;
import com.gitea.model.Repository;
import com.gitea.model.CreateRepoOption;
import com.gitea.model.CreateUserOption;
import com.gitea.model.User;
import com.gitea.model.Cron;
import com.gitea.model.EditUserOption;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminApi
 */
public class AdminApiTest {

    private final AdminApi api = new AdminApi();

    
    /**
     * Adopt unadopted files as a repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminAdoptRepositoryTest() throws ApiException {
        String owner = null;
        String repo = null;
        // api.adminAdoptRepository(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Create an organization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminCreateOrgTest() throws ApiException {
        String username = null;
        CreateOrgOption organization = null;
        // Organization response = api.adminCreateOrg(username, organization);

        // TODO: test validations
    }
    
    /**
     * Add a public key on behalf of a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminCreatePublicKeyTest() throws ApiException {
        String username = null;
        CreateKeyOption key = null;
        // PublicKey response = api.adminCreatePublicKey(username, key);

        // TODO: test validations
    }
    
    /**
     * Create a repository on behalf of a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminCreateRepoTest() throws ApiException {
        String username = null;
        CreateRepoOption repository = null;
        // Repository response = api.adminCreateRepo(username, repository);

        // TODO: test validations
    }
    
    /**
     * Create a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminCreateUserTest() throws ApiException {
        CreateUserOption body = null;
        // User response = api.adminCreateUser(body);

        // TODO: test validations
    }
    
    /**
     * List cron tasks
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminCronListTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        // List<Cron> response = api.adminCronList(page, limit);

        // TODO: test validations
    }
    
    /**
     * Run cron task
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminCronRunTest() throws ApiException {
        String task = null;
        // api.adminCronRun(task);

        // TODO: test validations
    }
    
    /**
     * Delete unadopted files
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminDeleteUnadoptedRepositoryTest() throws ApiException {
        String owner = null;
        String repo = null;
        // api.adminDeleteUnadoptedRepository(owner, repo);

        // TODO: test validations
    }
    
    /**
     * Delete a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminDeleteUserTest() throws ApiException {
        String username = null;
        // api.adminDeleteUser(username);

        // TODO: test validations
    }
    
    /**
     * Delete a user&#39;s public key
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminDeleteUserPublicKeyTest() throws ApiException {
        String username = null;
        Long id = null;
        // api.adminDeleteUserPublicKey(username, id);

        // TODO: test validations
    }
    
    /**
     * Edit an existing user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminEditUserTest() throws ApiException {
        String username = null;
        EditUserOption body = null;
        // User response = api.adminEditUser(username, body);

        // TODO: test validations
    }
    
    /**
     * List all organizations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminGetAllOrgsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        // List<Organization> response = api.adminGetAllOrgs(page, limit);

        // TODO: test validations
    }
    
    /**
     * List all users
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminGetAllUsersTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        // List<User> response = api.adminGetAllUsers(page, limit);

        // TODO: test validations
    }
    
    /**
     * List unadopted repositories
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void adminUnadoptedListTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        String pattern = null;
        // List<String> response = api.adminUnadoptedList(page, limit, pattern);

        // TODO: test validations
    }
    
}
