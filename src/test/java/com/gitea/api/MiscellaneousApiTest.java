/**
 * Gitea API.
 * This documentation describes the Gitea API.
 *
 * OpenAPI spec version: 1.16.8+97-gee14285
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.gitea.api;

import com.gitea.ApiException;
import com.gitea.model.NodeInfo;
import com.gitea.model.ServerVersion;
import com.gitea.model.MarkdownOption;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MiscellaneousApi
 */
public class MiscellaneousApiTest {

    private final MiscellaneousApi api = new MiscellaneousApi();

    
    /**
     * Returns the nodeinfo of the Gitea application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNodeInfoTest() throws ApiException {
        // NodeInfo response = api.getNodeInfo();

        // TODO: test validations
    }
    
    /**
     * Get default signing-key.gpg
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSigningKeyTest() throws ApiException {
        // String response = api.getSigningKey();

        // TODO: test validations
    }
    
    /**
     * Returns the version of the Gitea application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getVersionTest() throws ApiException {
        // ServerVersion response = api.getVersion();

        // TODO: test validations
    }
    
    /**
     * Render a markdown document as HTML
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void renderMarkdownTest() throws ApiException {
        MarkdownOption body = null;
        // String response = api.renderMarkdown(body);

        // TODO: test validations
    }
    
    /**
     * Render raw markdown as HTML
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void renderMarkdownRawTest() throws ApiException {
        String body = null;
        // String response = api.renderMarkdownRaw(body);

        // TODO: test validations
    }
    
}
